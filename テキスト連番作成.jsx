/* main エントリー *//*----------------------------------------    UI部分----------------------------------------*/var PsFonts = app.fonts;var FontsList = new Array();for (i=0;i<PsFonts.length;i++){    FontsList.push(PsFonts[i].postScriptName);}dlg = new Window("dialog","テキスト連番作成",{width:285,height:300,x:10,y:50}, {resizeable: true});//連番範囲dlg.sText = dlg.add("statictext",{ width : 100, height : 20, x : 20, y : 13 }, "連番範囲 :");dlg.sText2 = dlg.add("statictext",{ width : 10, height : 20, x : 180, y : 13 }, "-");dlg.eText  = dlg.add("edittext", { width : 60, height : 20, x : 110, y : 10 }, "1");dlg.eText2  = dlg.add("edittext", { width : 60, height : 20, x : 200, y : 10 }, "10");//フォントファミリーdlg.sText_tFamilly = dlg.add("statictext",{ width : 100, height : 20, x : 20, y : 43 }, "フォント種類 :");dlg.eText_tFamilly  = dlg.add("dropdownlist", { width : 150, height : 20, x : 110, y : 40 },FontsList);//フォントサイズdlg.sText_tSize = dlg.add("statictext",{ width : 100, height : 20, x : 20, y : 73 }, "サイズ :");dlg.eText_tSize  = dlg.add("edittext", { width : 150, height : 20, x : 110, y : 70 }, "16");//テキスト行揃え//dlg.sText_tJustify = dlg.add("statictext",{ width : 100, height : 20, x : 20, y : 103 }, "行揃え方法 :");//dlg.eText_tJustify  = dlg.add("dropdownlist", { width : 150, height : 20, x : 110, y : 100 } ,["LEFT","CENTER","RIGHT"]);//文字詰めdlg.sText_tKerning = dlg.add("statictext",{ width : 100, height : 20, x : 20, y : 103 }, "文字詰め方法 :");dlg.eText_tKerning  = dlg.add("dropdownlist", { width : 150, height : 20, x : 110, y : 100 }, ["MANUAL","METRICS","OPTICAL"]);//文字間隔dlg.sText_tTracking = dlg.add("statictext",{ width : 100, height : 20, x : 20, y : 133 }, "文字間隔 :");dlg.eText_tTracking  = dlg.add("edittext", { width : 150, height : 20, x : 110, y : 130 }, "0");dlg.sep3 = dlg.add('panel', { width : 240, height : 2, x : 20, y : 163 });dlg.okBtn = dlg.add("button",{ width : 240, height : 20, x : 20, y : 180 }, "生成", { name:"ok"});dlg.show();//alert(dlg.eText_tSize.text);//alert(getJustificationSelect(dlg.eText_tJustify.selection));/*----------------------------------------    メイン処理----------------------------------------*/saveUnit = preferences.rulerUnits;preferences.rulerUnits = Units.PIXELS;//アクティブレイヤー参照layObj = activeDocument.activeLayer;x1 = parseInt(layObj.bounds[0]);y1 = parseInt(layObj.bounds[1]);x2 = parseInt(layObj.bounds[2]);y2 = parseInt(layObj.bounds[3]);bWidth =　x2 - x1;bHeight = y2 - y1;setTextObject();//テキストオブジェクト生成function setTextObject() {    for (i=parseInt(dlg.eText.text); i < parseInt(dlg.eText2.text)+1;i++) {textObj = activeDocument.artLayers.add();textObj.kind = LayerKind.TEXT;textObj.textItem.justification = Justification.LEFT;textObj.textItem.autoKerning = getKerningSelect() ;textObj.textItem.tracking = dlg.eText_tTracking.text;if(dlg.eText_tFamilly.selection != null) {    textObj.textItem.font = dlg.eText_tFamilly.selection;}else {    textObj.textItem.font = "HiraKakuPro-W6";}textObj.textItem.contents = i;textObj.textItem.size = parseInt(dlg.eText_tSize.text);tx1 = parseInt(textObj.bounds[0]);ty1 = parseInt(textObj.bounds[1]);tx2 = parseInt(textObj.bounds[2]);ty2 = parseInt(textObj.bounds[3]);tWidth =  (tx2 - tx1);tHeight =  (ty2 - ty1);textObj.textItem.position = Array(0,0);//テキストを中央に配置vWidth = Math.floor(x1 + (bWidth - tWidth) / 2);vHeight = Math.floor(y1 + (bHeight + tHeight) / 2); textObj.translate(vWidth,vHeight);}preferences.rulerUnits = saveUnit;}//テキスト業揃え取得function getJustificationSelect() {    if (dlg.eText_tJustify.items[0].selected) {        result = Justification.LEFT;    }else if (dlg.eText_tJustify.items[1].selected) {        result = Justification.CENTER;    }else if (dlg.eText_tJustify.items[2].selected) {        result = Justification.RIGHT;    }else {        result = Justification.LEFT;    }        return result;}//テキスト文字詰め方法取得function getKerningSelect() {        if (dlg.eText_tKerning.items[0].selected) {        result = AutoKernType.MANUAL;    }else if (dlg.eText_tKerning.items[1].selected) {        result = AutoKernType.METRICS;    }else if (dlg.eText_tKerning.items[2].selected) {        result = AutoKernType.OPTICAL;    }else {        result = AutoKernType.MANUAL;    }        return result;}